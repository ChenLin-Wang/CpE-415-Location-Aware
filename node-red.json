[
    {
        "id": "ffe424105063a134",
        "type": "tab",
        "label": "Main Processing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7e767465ccb3b998",
        "type": "inject",
        "z": "ffe424105063a134",
        "name": "initialize the database when deploy the service",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 540,
        "y": 680,
        "wires": [
            [
                "9ea31ab6fb4f2475"
            ]
        ]
    },
    {
        "id": "e82e47059066d3a7",
        "type": "debug",
        "z": "ffe424105063a134",
        "name": "table exist debugging",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 840,
        "wires": []
    },
    {
        "id": "4a01da27b3e7b75d",
        "type": "switch",
        "z": "ffe424105063a134",
        "name": "table existed?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 680,
        "y": 920,
        "wires": [
            [
                "49cbdaf4618cb689",
                "2c9941e5c46c934a"
            ]
        ]
    },
    {
        "id": "38f65c94aed5375a",
        "type": "function",
        "z": "ffe424105063a134",
        "name": "get the table from the sqlite file",
        "func": "msg.topic = `\nSELECT CASE \n  WHEN EXISTS (\n    SELECT 1 \n    FROM sqlite_master \n    WHERE type='table' AND name='devices'\n  ) \n  THEN 1 \n  ELSE 0 \nEND AS result;\n`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 840,
        "wires": [
            [
                "305aa4a8bca77863"
            ]
        ]
    },
    {
        "id": "49cbdaf4618cb689",
        "type": "function",
        "z": "ffe424105063a134",
        "name": "create database table - devices",
        "func": "msg.topic = `\nCREATE TABLE IF NOT EXISTS devices (\n    id TEXT PRIMARY KEY,\n    name TEXT,\n    description TEXT,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 920,
        "wires": [
            [
                "7805cd80e82fe3b9"
            ]
        ]
    },
    {
        "id": "305aa4a8bca77863",
        "type": "sqlite",
        "z": "ffe424105063a134",
        "mydb": "46e311101e99cd9d",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "DB",
        "x": 850,
        "y": 840,
        "wires": [
            [
                "69bd592ffe5f9399"
            ]
        ]
    },
    {
        "id": "69bd592ffe5f9399",
        "type": "function",
        "z": "ffe424105063a134",
        "name": "parse check result",
        "func": "msg.payload = msg.payload[0].result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 840,
        "wires": [
            [
                "e82e47059066d3a7",
                "4a01da27b3e7b75d"
            ]
        ]
    },
    {
        "id": "dbc2bb87096a6c46",
        "type": "debug",
        "z": "ffe424105063a134",
        "name": "table creating result debugging - devices",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 920,
        "wires": []
    },
    {
        "id": "7805cd80e82fe3b9",
        "type": "sqlite",
        "z": "ffe424105063a134",
        "mydb": "46e311101e99cd9d",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "DB",
        "x": 1190,
        "y": 920,
        "wires": [
            [
                "dbc2bb87096a6c46"
            ]
        ]
    },
    {
        "id": "2c9941e5c46c934a",
        "type": "function",
        "z": "ffe424105063a134",
        "name": "create database table - devices_locations",
        "func": "msg.topic = `\nCREATE TABLE IF NOT EXISTS device_locations (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    device_id TEXT NOT NULL,\n    latitude REAL NOT NULL,\n    longitude REAL NOT NULL,\n    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (device_id) REFERENCES devices(id)\n);\n`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1000,
        "wires": [
            [
                "2c8bf9fd11f66ce7"
            ]
        ]
    },
    {
        "id": "2c8bf9fd11f66ce7",
        "type": "sqlite",
        "z": "ffe424105063a134",
        "mydb": "46e311101e99cd9d",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "DB",
        "x": 1250,
        "y": 1000,
        "wires": [
            [
                "b7df6c5dc6a7407d"
            ]
        ]
    },
    {
        "id": "b7df6c5dc6a7407d",
        "type": "debug",
        "z": "ffe424105063a134",
        "name": "table creating result debugging - devices_locations",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 1000,
        "wires": []
    },
    {
        "id": "f1e25e3f6dfc123c",
        "type": "http in",
        "z": "ffe424105063a134",
        "name": "receive location results",
        "url": "/location",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 460,
        "y": 1400,
        "wires": [
            [
                "775a7fc53cd075e5"
            ]
        ]
    },
    {
        "id": "775a7fc53cd075e5",
        "type": "json",
        "z": "ffe424105063a134",
        "name": "location json parse",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 573,
        "y": 1468,
        "wires": [
            [
                "fbb6f9894c99979c",
                "f80178ddd236ec21"
            ]
        ]
    },
    {
        "id": "fbb6f9894c99979c",
        "type": "debug",
        "z": "ffe424105063a134",
        "name": "location data debugging",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 843,
        "y": 1468,
        "wires": []
    },
    {
        "id": "dc845f01bd4a64d6",
        "type": "function",
        "z": "ffe424105063a134",
        "name": "insert the location data",
        "func": "const d = msg.payload;\n\nconst esc = (v) => v === null || v === undefined ? 'NULL' : `'${String(v).replace(/'/g, \"''\")}'`;\n\nmsg.topic = `\nINSERT INTO device_locations (device_id, latitude, longitude, timestamp)\nVALUES (\n  ${esc(d.device_id)},\n  ${d.latitude},\n  ${d.longitude},\n  CURRENT_TIMESTAMP\n);\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1620,
        "wires": [
            [
                "771d2217b9a6de99"
            ]
        ]
    },
    {
        "id": "506b459eb9340282",
        "type": "debug",
        "z": "ffe424105063a134",
        "name": "device data debugging",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1160,
        "wires": []
    },
    {
        "id": "64c7cce6158b8a39",
        "type": "http in",
        "z": "ffe424105063a134",
        "name": "receive device data",
        "url": "/device",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 450,
        "y": 1080,
        "wires": [
            [
                "4cac1b0e7a41c75f"
            ]
        ]
    },
    {
        "id": "4cac1b0e7a41c75f",
        "type": "json",
        "z": "ffe424105063a134",
        "name": "device json parse",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 570,
        "y": 1160,
        "wires": [
            [
                "506b459eb9340282",
                "3bb6dc193e76d62e"
            ]
        ]
    },
    {
        "id": "f1f0d0b06f9d724a",
        "type": "function",
        "z": "ffe424105063a134",
        "name": "insert or update device if needed",
        "func": "const d = msg.payload;\n\nif (!d.id) {\n    node.error(\"Missing device ID\");\n    msg.statusCode = 400;\n    msg.payload = { error: \"Missing device ID\" };\n    return msg;  \n}\n\nconst esc = (v) => v ? `'${String(v).replace(/'/g, \"''\")}'` : 'NULL';\n\nmsg.topic = `\nINSERT INTO devices (id, name, description)\nVALUES (\n  ${esc(d.id)},\n  ${esc(d.name)},\n  ${esc(d.description)}\n)\nON CONFLICT(id) DO UPDATE\nSET\n  name = CASE\n    WHEN excluded.name IS NOT devices.name THEN excluded.name\n    ELSE devices.name\n  END,\n  description = CASE\n    WHEN excluded.description IS NOT devices.description THEN excluded.description\n    ELSE devices.description\n  END\nWHERE\n  excluded.name IS NOT devices.name\n  OR excluded.description IS NOT devices.description;\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1240,
        "wires": [
            [
                "077ad459a7820e8f"
            ]
        ]
    },
    {
        "id": "077ad459a7820e8f",
        "type": "sqlite",
        "z": "ffe424105063a134",
        "mydb": "46e311101e99cd9d",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "DB",
        "x": 1130,
        "y": 1240,
        "wires": [
            [
                "b646f7d8d9500f58",
                "919ec9fdd5fba3d4"
            ]
        ]
    },
    {
        "id": "b646f7d8d9500f58",
        "type": "debug",
        "z": "ffe424105063a134",
        "name": "device data insertion debugging",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 1240,
        "wires": []
    },
    {
        "id": "771d2217b9a6de99",
        "type": "sqlite",
        "z": "ffe424105063a134",
        "mydb": "46e311101e99cd9d",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "DB",
        "x": 1130,
        "y": 1620,
        "wires": [
            [
                "a9f26fb138d1ccd1",
                "180a4810a6cc73b2"
            ]
        ]
    },
    {
        "id": "a9f26fb138d1ccd1",
        "type": "debug",
        "z": "ffe424105063a134",
        "name": "location data insertion debugging",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 1620,
        "wires": []
    },
    {
        "id": "919ec9fdd5fba3d4",
        "type": "http response",
        "z": "ffe424105063a134",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 1080,
        "y": 1320,
        "wires": []
    },
    {
        "id": "180a4810a6cc73b2",
        "type": "http response",
        "z": "ffe424105063a134",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 1160,
        "y": 1700,
        "wires": []
    },
    {
        "id": "3bb6dc193e76d62e",
        "type": "switch",
        "z": "ffe424105063a134",
        "name": "data valid?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "id",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 1240,
        "wires": [
            [
                "f1f0d0b06f9d724a"
            ],
            [
                "b9c8cb5d9181acfd"
            ]
        ]
    },
    {
        "id": "b9c8cb5d9181acfd",
        "type": "function",
        "z": "ffe424105063a134",
        "name": "data invalid",
        "func": "node.error(\"Missing device ID\");\nmsg.statusCode = 400;\nmsg.payload = { error: \"Missing device ID\" };\nreturn msg;  ",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1320,
        "wires": [
            [
                "919ec9fdd5fba3d4"
            ]
        ]
    },
    {
        "id": "f0bafde9c72bed06",
        "type": "switch",
        "z": "ffe424105063a134",
        "name": "data valid?",
        "property": "isValid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 1620,
        "wires": [
            [
                "dc845f01bd4a64d6"
            ],
            [
                "b949fa0b494d155c"
            ]
        ]
    },
    {
        "id": "b949fa0b494d155c",
        "type": "function",
        "z": "ffe424105063a134",
        "name": "data invalid",
        "func": "node.error(\"Missing one or more required parameters (device_id, latitude, longitude)\", msg);\n\nmsg.statusCode = 400;\nmsg.payload = {\n    error: \"Missing one or more required parameters (device_id, latitude, longitude)\"\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1700,
        "wires": [
            [
                "180a4810a6cc73b2"
            ]
        ]
    },
    {
        "id": "f80178ddd236ec21",
        "type": "function",
        "z": "ffe424105063a134",
        "name": "check data valid",
        "func": "msg.isValid = msg.payload.device_id && \n              msg.payload.latitude !== undefined && \n              msg.payload.longitude !== undefined;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1540,
        "wires": [
            [
                "f0bafde9c72bed06"
            ]
        ]
    },
    {
        "id": "9ea31ab6fb4f2475",
        "type": "sqlite",
        "z": "ffe424105063a134",
        "mydb": "46e311101e99cd9d",
        "sqlquery": "fixed",
        "sql": "PRAGMA foreign_keys = ON;",
        "name": "DB",
        "x": 470,
        "y": 760,
        "wires": [
            [
                "38f65c94aed5375a",
                "b0fb61acb292a280"
            ]
        ]
    },
    {
        "id": "b0fb61acb292a280",
        "type": "debug",
        "z": "ffe424105063a134",
        "name": "initialize debugging",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 760,
        "wires": []
    },
    {
        "id": "c16541f24e8778a8",
        "type": "catch",
        "z": "ffe424105063a134",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 440,
        "y": 1780,
        "wires": [
            [
                "034c08abbe4e848a"
            ]
        ]
    },
    {
        "id": "3ec6a7cc1bf1c66f",
        "type": "http response",
        "z": "ffe424105063a134",
        "name": "HTTP Response",
        "statusCode": "200",
        "headers": {},
        "x": 860,
        "y": 1780,
        "wires": []
    },
    {
        "id": "034c08abbe4e848a",
        "type": "function",
        "z": "ffe424105063a134",
        "name": "error handler",
        "func": "msg.statusCode = 400;\nmsg.payload = {\n    error: msg.error.message\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1780,
        "wires": [
            [
                "3ec6a7cc1bf1c66f"
            ]
        ]
    },
    {
        "id": "46e311101e99cd9d",
        "type": "sqlitedb",
        "db": "/tmp/sqlite",
        "mode": "RWC"
    },
    {
        "id": "7b1c8e9e512a3e7c",
        "type": "global-config",
        "env": [],
        "modules": {
            "node-red-node-sqlite": "1.1.1"
        }
    }
]